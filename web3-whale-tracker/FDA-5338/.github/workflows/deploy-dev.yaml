name: Deploy to dev
on:
    workflow_dispatch: {}
    push:
        branches:
          - main
jobs:
  test: 
    name: Test
    runs-on: ubuntu-latest
    env:
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      GOPRIVATE: github.com/Forbes-Media/
    steps:
      - uses: actions/checkout@v3.5.0
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
      - name: Go Private Setup
        run: git config --global url.https://$GH_ACCESS_TOKEN@github.com/Forbes-Media.insteadOf https://github.com/Forbes-Media
      - name: Running Unit Tests
        run: go test ./...
        timeout-minutes: 30
      - name: Cleanup
        run: rm ~/.gitconfig
  deploy-dev:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: "fda-web3-whale-tracker-dev"
      project_id: "digital-assets-301018"
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      GOPRIVATE: github.com/Forbes-Media/
      REPOSITORY_BASE: 'us-docker.pkg.dev'
      REPOSITORY_URL: 'us-docker.pkg.dev/digital-assets-301018/docker'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: checkout the repo
        uses: actions/checkout@v4

      - id: auth
        name: Auth gcloud
        uses: google-github-actions/auth@v2.1.3
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          token_format: access_token
          access_token_lifetime: 3600s

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.project_id }}

      - name: Go Private Setup
        run: git config --global url.https://$GH_ACCESS_TOKEN@github.com/Forbes-Media.insteadOf https://github.com/Forbes-Media

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21
          check-latest: true
          cache: true
      - name: Go Vendor
        run: go mod vendor

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REPOSITORY_BASE }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            version=${{ github.ref_name }}
          tags: |
            ${{ env.REPOSITORY_URL }}/${{ env.SERVICE_NAME }}:${{ github.ref_name }}
            ${{ env.REPOSITORY_URL }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
            ${{ env.REPOSITORY_URL }}/${{ env.SERVICE_NAME }}:latest
          labels: |
            org.opencontainers.image.source= ${{ github.event.repository.html_url }}
            org.opencontainers.image.revision= ${{ github.sha }}
            org.opencontainers.image.version= ${{ github.ref_name }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2.6.0
        env:
          VERSION: ${{ github.sha }}
          SCHEDULER_OIDC_SERVICE_ACCOUNT: 468738938560-compute@developer.gserviceaccount.com
          DATA_NAMESPACE: _dev
          ROWY_PREFIX: dev_
          BQ_PROJECT_ID: "api-project-901373404215"
          OTEL_ENABLED: "false"
          OTEL_METRIC_FREQUENCY: "10m"
          OTEL_SERVICE_NAME: "fda-web3-whale-tracker-dev"
          OTEL_SAMPLE_RATE: "0.5"
          OTEL_EXPORTER_OTLP_ENDPOINT: "https://otlp.nr-data.net/"
        with:
          service: ${{ env.SERVICE_NAME }}
          labels: env=dev
          region: "us-east4"
          image: ${{ env.REPOSITORY_URL }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          env_vars: VERSION=${{env.VERSION}},SCHEDULER_OIDC_SERVICE_ACCOUNT=${{env.SCHEDULER_OIDC_SERVICE_ACCOUNT}},DATA_NAMESPACE=${{env.DATA_NAMESPACE}},ROWY_PREFIX=${{env.ROWY_PREFIX}},BQ_PROJECT_ID=${{env.BQ_PROJECT_ID}},OTEL_ENABLED=${{env.OTEL_ENABLED}},OTEL_METRIC_FREQUENCY=${{env.OTEL_METRIC_FREQUENCY}},OTEL_SERVICE_NAME=${{env.OTEL_SERVICE_NAME}},OTEL_SAMPLE_RATE=${{env.OTEL_SAMPLE_RATE}},OTEL_EXPORTER_OTLP_ENDPOINT=${{env.OTEL_EXPORTER_OTLP_ENDPOINT}}
          secrets: SLACK_CHANNEL_ID=SLACK_CHANNEL_ID:latest,SLACK_API_TOKEN=SLACK_API_TOKEN:latest

      # - name: Create Pub/Sub topic
        # run: gcloud pubsub topics create YOUR_TOPIC_NAME || echo "Topic already exists"

      - name: Get Pub/Sub service account email
        id: get-service-account-email
        run: |
          PUBSUB_SERVICE_ACCOUNT=$(gcloud projects get-iam-policy ${{ env.project_id }} \
            --flatten="bindings[].members" \
            --format='table(bindings.members)' \
            --filter="bindings.role:roles/pubsub.serviceAgent" \
            | grep serviceAccount:service-${{ env.project_id }}@gcp-sa-pubsub.iam.gserviceaccount.com | cut -d ':' -f2)
          echo "::set-output name=pubsub_sa_email::$PUBSUB_SERVICE_ACCOUNT"

      - name: Grant Pub/Sub permission to invoke Cloud Run
        run: |
          gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
            --region us-east4 \
            --member=serviceAccount:${{ steps.get-service-account-email.outputs.pubsub_sa_email }} \
            --role=roles/run.invoker

      - name: Create Pub/Sub push subscription
        run: |
          gcloud pubsub subscriptions create colorful-notion-ethereum_transactions_raw \
            --topic projects/awesome-web3/topics/ethereum_transactions_raw \
            --push-endpoint=https://${{ steps.deploy.outputs.service_url }}/consume-pubsub-messages \
            --ack-deadline=30 || echo "Subscription already exists"

      - name: Cleanup
        if: always()
        run: |
          rm ~/.gitconfig;
          rm -rf vendor/;